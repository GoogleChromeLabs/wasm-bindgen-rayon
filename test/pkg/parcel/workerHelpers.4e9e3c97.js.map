{"mappings":"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","sources":["node_modules/@parcel/runtime-js/lib/runtime-e9ac9dbd9bb26463.js","node_modules/@parcel/runtime-js/lib/helpers/worker/js-loader.js","node_modules/@parcel/runtime-js/lib/helpers/cacheLoader.js","node_modules/@parcel/runtime-js/lib/helpers/bundle-url.js","node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/@parcel/runtime-js/lib/runtime-7a118b957948a7eb.js","node_modules/@parcel/runtime-js/lib/helpers/get-worker-url.js","pkg/snippets/wasm-bindgen-rayon-7afa899f36665473/src/workerHelpers.js"],"sourcesContent":["module.exports = (require(\"./helpers/worker/js-loader\")(require('./helpers/bundle-url').getBundleURL('ldTKI') + require('./helpers/bundle-manifest').resolve(\"55I7O\"))).then(() => parcelRequire('lyMph'));","\"use strict\";\n\n/* global __parcel__importScripts__:readonly*/\nvar cacheLoader = require('../cacheLoader');\n\nmodule.exports = cacheLoader(function (bundle) {\n  return new Promise(function (resolve, reject) {\n    try {\n      __parcel__importScripts__(bundle);\n\n      resolve();\n    } catch (e) {\n      reject(e);\n    }\n  });\n});","\"use strict\";\n\nvar cachedBundles = {};\nvar cachedPreloads = {};\nvar cachedPrefetches = {};\n\nfunction getCache(type) {\n  switch (type) {\n    case 'preload':\n      return cachedPreloads;\n\n    case 'prefetch':\n      return cachedPrefetches;\n\n    default:\n      return cachedBundles;\n  }\n}\n\nmodule.exports = function (loader, type) {\n  return function (bundle) {\n    var cache = getCache(type);\n\n    if (cache[bundle]) {\n      return cache[bundle];\n    }\n\n    return cache[bundle] = loader.apply(null, arguments).catch(function (e) {\n      delete cache[bundle];\n      throw e;\n    });\n  };\n};","\"use strict\";\n\nvar bundleURL = {};\n\nfunction getBundleURLCached(id) {\n  var value = bundleURL[id];\n\n  if (!value) {\n    value = getBundleURL();\n    bundleURL[id] = value;\n  }\n\n  return value;\n}\n\nfunction getBundleURL() {\n  try {\n    throw new Error();\n  } catch (err) {\n    var matches = ('' + err.stack).match(/(https?|file|ftp|(chrome|moz|safari-web)-extension):\\/\\/[^)\\n]+/g);\n\n    if (matches) {\n      // The first two stack frames will be this function and getBundleURLCached.\n      // Use the 3rd one, which will be a runtime in the original bundle.\n      return getBaseURL(matches[2]);\n    }\n  }\n\n  return '/';\n}\n\nfunction getBaseURL(url) {\n  return ('' + url).replace(/^((?:https?|file|ftp|(chrome|moz|safari-web)-extension):\\/\\/.+)\\/[^/]+$/, '$1') + '/';\n} // TODO: Replace uses with `new URL(url).origin` when ie11 is no longer supported.\n\n\nfunction getOrigin(url) {\n  var matches = ('' + url).match(/(https?|file|ftp|(chrome|moz|safari-web)-extension):\\/\\/[^/]+/);\n\n  if (!matches) {\n    throw new Error('Origin not found');\n  }\n\n  return matches[0];\n}\n\nexports.getBundleURL = getBundleURLCached;\nexports.getBaseURL = getBaseURL;\nexports.getOrigin = getOrigin;","\"use strict\";\n\nvar mapping = {};\n\nfunction register(pairs) {\n  var keys = Object.keys(pairs);\n\n  for (var i = 0; i < keys.length; i++) {\n    mapping[keys[i]] = pairs[keys[i]];\n  }\n}\n\nfunction resolve(id) {\n  var resolved = mapping[id];\n\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n\n  return resolved;\n}\n\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","let workerURL = require('./helpers/get-worker-url');\nlet bundleURL = require('./helpers/bundle-url');\nlet url = bundleURL.getBundleURL('ldTKI') + require('./helpers/bundle-manifest').resolve(\"ldTKI\");module.exports = workerURL(url, bundleURL.getOrigin(url), false);","\"use strict\";\n\nmodule.exports = function (workerUrl, origin, isESM) {\n  if (origin === self.location.origin) {\n    // If the worker bundle's url is on the same origin as the document,\n    // use the worker bundle's own url.\n    return workerUrl;\n  } else {\n    // Otherwise, create a blob URL which loads the worker bundle with `importScripts`.\n    var source = isESM ? 'import ' + JSON.stringify(workerUrl) + ';' : 'importScripts(' + JSON.stringify(workerUrl) + ');';\n    return URL.createObjectURL(new Blob([source], {\n      type: 'application/javascript'\n    }));\n  }\n};","/*\r\n * Copyright 2022 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n// Note: we use `wasm_bindgen_worker_`-prefixed message types to make sure\r\n// we can handle bundling into other files, which might happen to have their\r\n// own `postMessage`/`onmessage` communication channels.\r\n//\r\n// If we didn't take that into the account, we could send much simpler signals\r\n// like just `0` or whatever, but the code would be less resilient.\r\n\r\nfunction waitForMsgType(target, type) {\r\n  return new Promise(resolve => {\r\n    target.addEventListener('message', function onMsg({ data }) {\r\n      if (data == null || data.type !== type) return;\r\n      target.removeEventListener('message', onMsg);\r\n      resolve(data);\r\n    });\r\n  });\r\n}\r\n\r\nwaitForMsgType(self, 'wasm_bindgen_worker_init').then(async data => {\r\n  // # Note 1\r\n  // Our JS should have been generated in\r\n  // `[out-dir]/snippets/wasm-bindgen-rayon-[hash]/workerHelpers.js`,\r\n  // resolve the main module via `../../..`.\r\n  //\r\n  // This might need updating if the generated structure changes on wasm-bindgen\r\n  // side ever in the future, but works well with bundlers today. The whole\r\n  // point of this crate, after all, is to abstract away unstable features\r\n  // and temporary bugs so that you don't need to deal with them in your code.\r\n  //\r\n  // # Note 2\r\n  // This could be a regular import, but then some bundlers complain about\r\n  // circular deps.\r\n  //\r\n  // Dynamic import could be cheap if this file was inlined into the parent,\r\n  // which would require us just using `../../..` in `new Worker` below,\r\n  // but that doesn't work because wasm-pack unconditionally adds\r\n  // \"sideEffects\":false (see below).\r\n  //\r\n  // OTOH, even though it can't be inlined, it should be still reasonably\r\n  // cheap since the requested file is already in cache (it was loaded by\r\n  // the main thread).\r\n  const pkg = await import('../../..');\r\n  await pkg.default(data.module, data.memory);\r\n  postMessage({ type: 'wasm_bindgen_worker_ready' });\r\n  pkg.wbg_rayon_start_worker(data.receiver);\r\n});\r\n\r\n// Note: this is never used, but necessary to prevent a bug in Firefox\r\n// (https://bugzilla.mozilla.org/show_bug.cgi?id=1702191) where it collects\r\n// Web Workers that have a shared WebAssembly memory with the main thread,\r\n// but are not explicitly rooted via a `Worker` instance.\r\n//\r\n// By storing them in a variable, we can keep `Worker` objects around and\r\n// prevent them from getting GC-d.\r\nlet _workers;\r\n\r\nexport async function startWorkers(module, memory, builder) {\r\n  if (builder.numThreads() === 0) {\r\n    throw new Error(`num_threads must be > 0.`);\r\n  }\r\n\r\n  const workerInit = {\r\n    type: 'wasm_bindgen_worker_init',\r\n    module,\r\n    memory,\r\n    receiver: builder.receiver()\r\n  };\r\n\r\n  _workers = await Promise.all(\r\n    Array.from({ length: builder.numThreads() }, async () => {\r\n      // Self-spawn into a new Worker.\r\n      //\r\n      // TODO: while `new URL('...', import.meta.url) becomes a semi-standard\r\n      // way to get asset URLs relative to the module across various bundlers\r\n      // and browser, ideally we should switch to `import.meta.resolve`\r\n      // once it becomes a standard.\r\n      //\r\n      // Note: we could use `../../..` as the URL here to inline workerHelpers.js\r\n      // into the parent entry instead of creating another split point -\r\n      // this would be preferable from optimization perspective -\r\n      // however, Webpack then eliminates all message handler code\r\n      // because wasm-pack produces \"sideEffects\":false in package.json\r\n      // unconditionally.\r\n      //\r\n      // The only way to work around that is to have side effect code\r\n      // in an entry point such as Worker file itself.\r\n      const worker = new Worker(new URL('./workerHelpers.js', import.meta.url), {\r\n        type: 'module'\r\n      });\r\n      worker.postMessage(workerInit);\r\n      await waitForMsgType(worker, 'wasm_bindgen_worker_ready');\r\n      return worker;\r\n    })\r\n  );\r\n  builder.build();\r\n}\r\n"],"names":["module","exports","parcelRequire","getBundleURL","resolve","then","$90gdW","bundle","Promise","reject","importScripts","e","$68e0b2e0ca9293f2$var$cachedBundles","$68e0b2e0ca9293f2$var$cachedPreloads","$68e0b2e0ca9293f2$var$cachedPrefetches","$68e0b2e0ca9293f2$var$getCache","type","loader","cache","apply","arguments","catch","$01a32f7bf710fe19$export$bdfd709ae4826697","$01a32f7bf710fe19$export$5a759dc7a1cfb72a","$01a32f7bf710fe19$var$bundleURL","$01a32f7bf710fe19$var$getBaseURL","url","replace","id","value","Error","err","matches","stack","match","$01a32f7bf710fe19$var$getBundleURL","$8831245f07480bee$export$6503ec6e8aabbaf","$8831245f07480bee$export$f7ad0328861e2f03","$8831245f07480bee$var$mapping","pairs","keys","Object","i","length","resolved","$7YDMF","$e728a3e5fabdbd74$var$url","$8IoA4","getOrigin","workerUrl","origin","isESM","self","location","source","JSON","stringify","URL","createObjectURL","Blob","$ac8095b6f72aa937$var$waitForMsgType","target","addEventListener","onMsg","data","removeEventListener","$ac8095b6f72aa937$export$6a13f9f53ddacde8","memory","builder","numThreads","workerInit","receiver","all","Array","from","async","pkg","default","postMessage","wbg_rayon_start_worker"],"version":3,"file":"workerHelpers.4e9e3c97.js.map"}